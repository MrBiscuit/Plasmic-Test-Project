// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: g8C3icktQBD8rCBAattbXo
// Component: qqDozDvqia
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: fdJU2Zrvp6/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: g8C3icktQBD8rCBAattbXo/projectcss
import * as sty from "./PlasmicHomepage.module.css"; // plasmic-import: qqDozDvqia/css

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  frame1?: p.Flex<"div">;
  card?: p.Flex<"div">;
  head?: p.Flex<"div">;
  input?: p.Flex<"div">;
  input2?: p.Flex<"div">;
  input3?: p.Flex<"div">;
  titleWrapper?: p.Flex<"div">;
  title?: p.Flex<"div">;
  text2?: p.Flex<"div">;
  extra?: p.Flex<"div">;
  text3?: p.Flex<"div">;
  body?: p.Flex<"div">;
  texttext?: p.Flex<"div">;
  text4?: p.Flex<"div">;
  texttext2?: p.Flex<"div">;
  text5?: p.Flex<"div">;
  button?: p.Flex<typeof Button>;
};

export interface DefaultHomepageProps {
  className?: string;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  dataFetches?: PlasmicHomepage__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <React.Fragment>
      {}
      {}

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox
            )}
          >
            {"Welcome to your first page."}
          </div>

          <div
            data-plasmic-name={"frame1"}
            data-plasmic-override={overrides.frame1}
            className={classNames(defaultcss.all, sty.frame1)}
          >
            <div
              data-plasmic-name={"card"}
              data-plasmic-override={overrides.card}
              className={classNames(defaultcss.all, sty.card)}
            >
              <div
                data-plasmic-name={"head"}
                data-plasmic-override={overrides.head}
                className={classNames(defaultcss.all, sty.head)}
              >
                <div
                  data-plasmic-name={"input"}
                  data-plasmic-override={overrides.input}
                  className={classNames(defaultcss.all, sty.input)}
                >
                  <div
                    data-plasmic-name={"input2"}
                    data-plasmic-override={overrides.input2}
                    className={classNames(defaultcss.all, sty.input2)}
                  >
                    <div
                      data-plasmic-name={"input3"}
                      data-plasmic-override={overrides.input3}
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.input3
                      )}
                    >
                      {"example"}
                    </div>
                  </div>
                </div>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"titleWrapper"}
                  data-plasmic-override={overrides.titleWrapper}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.titleWrapper)}
                >
                  <div
                    data-plasmic-name={"title"}
                    data-plasmic-override={overrides.title}
                    className={classNames(defaultcss.all, sty.title)}
                  >
                    <div
                      data-plasmic-name={"text2"}
                      data-plasmic-override={overrides.text2}
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text2
                      )}
                    >
                      {"Card Title"}
                    </div>
                  </div>

                  <div
                    data-plasmic-name={"extra"}
                    data-plasmic-override={overrides.extra}
                    className={classNames(defaultcss.all, sty.extra)}
                  >
                    <div
                      data-plasmic-name={"text3"}
                      data-plasmic-override={overrides.text3}
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text3
                      )}
                    >
                      {"More"}
                    </div>
                  </div>
                </p.Stack>
              </div>

              <p.Stack
                as={"div"}
                data-plasmic-name={"body"}
                data-plasmic-override={overrides.body}
                hasGap={true}
                className={classNames(defaultcss.all, sty.body)}
              >
                <div
                  data-plasmic-name={"texttext"}
                  data-plasmic-override={overrides.texttext}
                  className={classNames(defaultcss.all, sty.texttext)}
                >
                  <div
                    data-plasmic-name={"text4"}
                    data-plasmic-override={overrides.text4}
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.text4
                    )}
                  >
                    {"Europe Street beat"}
                  </div>
                </div>

                <div
                  data-plasmic-name={"texttext2"}
                  data-plasmic-override={overrides.texttext2}
                  className={classNames(defaultcss.all, sty.texttext2)}
                >
                  <div
                    data-plasmic-name={"text5"}
                    data-plasmic-override={overrides.text5}
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.text5
                    )}
                  >
                    {"www.instagram.com"}
                  </div>
                </div>
              </p.Stack>
            </div>

            <Button
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames("__wab_instance", sty.button)}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "freeBox",
    "frame1",
    "card",
    "head",
    "input",
    "input2",
    "input3",
    "titleWrapper",
    "title",
    "text2",
    "extra",
    "text3",
    "body",
    "texttext",
    "text4",
    "texttext2",
    "text5",
    "button"
  ],
  freeBox: ["freeBox"],
  frame1: [
    "frame1",
    "card",
    "head",
    "input",
    "input2",
    "input3",
    "titleWrapper",
    "title",
    "text2",
    "extra",
    "text3",
    "body",
    "texttext",
    "text4",
    "texttext2",
    "text5",
    "button"
  ],
  card: [
    "card",
    "head",
    "input",
    "input2",
    "input3",
    "titleWrapper",
    "title",
    "text2",
    "extra",
    "text3",
    "body",
    "texttext",
    "text4",
    "texttext2",
    "text5"
  ],
  head: [
    "head",
    "input",
    "input2",
    "input3",
    "titleWrapper",
    "title",
    "text2",
    "extra",
    "text3"
  ],
  input: ["input", "input2", "input3"],
  input2: ["input2", "input3"],
  input3: ["input3"],
  titleWrapper: ["titleWrapper", "title", "text2", "extra", "text3"],
  title: ["title", "text2"],
  text2: ["text2"],
  extra: ["extra", "text3"],
  text3: ["text3"],
  body: ["body", "texttext", "text4", "texttext2", "text5"],
  texttext: ["texttext", "text4"],
  text4: ["text4"],
  texttext2: ["texttext2", "text5"],
  text5: ["text5"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  frame1: "div";
  card: "div";
  head: "div";
  input: "div";
  input2: "div";
  input3: "div";
  titleWrapper: "div";
  title: "div";
  text2: "div";
  extra: "div";
  text3: "div";
  body: "div";
  texttext: "div";
  text4: "div";
  texttext2: "div";
  text5: "div";
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicHomepage__Fetches;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomepage__ArgProps,
      internalVariantPropNames: PlasmicHomepage__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    frame1: makeNodeComponent("frame1"),
    card: makeNodeComponent("card"),
    head: makeNodeComponent("head"),
    input: makeNodeComponent("input"),
    input2: makeNodeComponent("input2"),
    input3: makeNodeComponent("input3"),
    titleWrapper: makeNodeComponent("titleWrapper"),
    title: makeNodeComponent("title"),
    text2: makeNodeComponent("text2"),
    extra: makeNodeComponent("extra"),
    text3: makeNodeComponent("text3"),
    body: makeNodeComponent("body"),
    texttext: makeNodeComponent("texttext"),
    text4: makeNodeComponent("text4"),
    texttext2: makeNodeComponent("texttext2"),
    text5: makeNodeComponent("text5"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
